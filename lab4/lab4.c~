char plain[132];
int coded[] = {...}

int codgen(int *seed_addr);

int decode(int *wordarr,char *bytearr,int *seed_addr);

int main(void){
	int seed = 0x090912dd;
	decode(coded, plain, seed);


int codgen(int *seed_addr){
    int n=0;
    unsigned int x,y=0;
        while (seed_addr > 0) {
            if ((value & 1) == 1)
                n++;
            seed_addr >>= 1;
    }
    x= (seed_addr << 25) | (seed_addr >> (8 - 25));
    y=seed_addr>>1


    seed_addr=x+y+n
    return (sedd_addr xor 0x0bbd95aa)
}


int decode(int *wordarr,char *bytearr,int *seed_addr){
	
	int m,r,y,x
	#define MAX_SIZE 101

	int A[MAX_SIZE]; // integer array to store the stack 
	int top = -1;  // variable to mark top of stack in array

	x = (~codgen(seed_addr));
	push(x);

	if(wordarr == 0){
		bytearr = 0;
		r = x;
		push(r)	
	}
	else{
		wordarr = wordarr + 4;
		bytearr = bytearr + 1;
		y = decode(wordarr, bytearr, seed_addr);
		push(y);
		m = (x - y) + wordarr;
		push(m);
		m << 21;
		int z = (m >> (8*3)) & 0xff;
		bytearr = z;
		r = (~codgen(seed_addr))+1);
		push(r);
		r = x+y+m+r+5;
		push(r);

	// Push operation to insert an element on top of stack. 
	void Push(int x) 
	{
		if(top == MAX_SIZE -1) { // overflow case. 
	    		printf("Error: stack overflow\n");
	    		return;
		}
		A[++top] = x;
	}

	// Pop operation to remove an element from top of stack.
	void Pop() 
	{
		if(top == -1) { // If stack is empty, pop should throw error. 
			printf("Error: No element to pop\n");
			return;
		}
		top--;
	}

	// Top operation to return element at top of stack. 
	int Top() 
	{
		return A[top];
	}

	// This function will return 1 (true) if stack is empty, 0 (false) otherwise
	int IsEmpty()
	{
    		if(top == -1) return 1;
    		return 0;
	}

	}
